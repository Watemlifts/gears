"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var environment;
(function (environment) {
    var _platform = "unknown";
    var _buffer = [];
    function platform() {
        if (_platform === "unknown") {
            try {
                var _ = process;
                _platform = "node";
            }
            catch (e) {
                _platform = "browser";
            }
        }
        return _platform;
    }
    environment.platform = platform;
    function newline() {
        switch (platform()) {
            case "node":
                process.stdout.write("\n");
                break;
            case "browser":
                console.log(_buffer.join(''));
                _buffer = [];
                break;
        }
    }
    environment.newline = newline;
    function write(message) {
        switch (platform()) {
            case "node":
                process.stdout.write(message);
                break;
            case "browser":
                _buffer.push(message);
                break;
        }
    }
    environment.write = write;
})(environment || (environment = {}));
var log;
(function (log) {
    function newline() {
        environment.newline();
    }
    log.newline = newline;
    function write(message) {
        environment.write('\x1b[0m');
        environment.write(message);
        environment.write('\x1b[0m');
    }
    log.write = write;
    function info(message) {
        environment.write('\x1b[33m');
        environment.write(message);
        environment.write('\x1b[0m');
    }
    log.info = info;
    function ok(message) {
        environment.write('\x1b[32m');
        environment.write(message);
        environment.write('\x1b[0m');
    }
    log.ok = ok;
    function fail(message) {
        environment.write('\x1b[31m');
        environment.write(message);
        environment.write('\x1b[0m');
    }
    log.fail = fail;
})(log || (log = {}));
var tests = new Array();
function test(reason, func) {
    tests.push(function (next) {
        try {
            var done_1 = false;
            log.info("running ");
            log.write(reason);
            log.write(" ");
            func({
                assert: function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (done_1 === true)
                        return;
                    var _a = (args.length === 2)
                        ? [args[0], args[1]]
                        : (args.length === 1)
                            ? ["failed", args[0]]
                            : ["failed", false], reason = _a[0], assertion = _a[1];
                    if (assertion === false) {
                        done_1 = true;
                        log.fail(reason);
                        log.newline();
                        next(false);
                    }
                },
                ok: function () {
                    if (done_1 === true)
                        return;
                    done_1 = true;
                    log.ok("ok");
                    log.newline();
                    next(true);
                }
            });
        }
        catch (e) {
            log.fail(e.message);
            log.newline();
            next(false);
        }
    });
}
exports.test = test;
function run() {
    return tests.reduce(function (promise, test) {
        return promise.then(function (value) { return new Promise(function (resolve, _) {
            test(function (result) {
                resolve({
                    ok: result ? value.ok + 1 : value.ok,
                    fail: result ? value.fail : value.fail + 1
                });
            });
        }); });
    }, Promise.resolve({ ok: 0, fail: 0 })).then(function (result) {
        log.ok("         " + result.ok.toString() + " passed");
        log.newline();
        log.fail("         " + result.fail.toString() + " failed");
        log.newline();
        return result;
    });
}
exports.run = run;
