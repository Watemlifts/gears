"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parse_1 = require("../src/parser/parse");
var process_1 = require("../src/process/process");
var runner = require("./runner");
var argv = function (input) {
    return [].concat(['nodepath', 'scriptpath'], input.split(' '));
};
runner.test("arguments: pattern 0", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("[input a] [input b]"));
        context.assert(arg.paths.length === 1);
        context.assert(arg.paths[0] === "./");
        context.assert(arg.commands.length === 2);
        context.assert(arg.commands[0] === "input a");
        context.assert(arg.commands[1] === "input b");
        context.ok();
    }
    catch (e) {
        context.assert(e.message, false);
    }
});
runner.test("arguments: pattern 1", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("./src/test [input a] [input b]"));
        context.assert(arg.paths.length === 1);
        context.assert(arg.paths[0] === "./src/test");
        context.assert(arg.commands.length === 2);
        context.assert(arg.commands[0] === "input a");
        context.assert(arg.commands[1] === "input b");
        context.ok();
    }
    catch (e) {
        context.assert(e.message, false);
    }
});
runner.test("arguments: pattern 2", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("./src/test [input a][input b]"));
        context.assert(arg.paths.length === 1);
        context.assert(arg.paths[0] === "./src/test");
        context.assert(arg.commands.length === 2);
        context.assert(arg.commands[0] === "input a");
        context.assert(arg.commands[1] === "input b");
        context.ok();
    }
    catch (e) {
        context.assert(e.message, false);
    }
});
runner.test("arguments: pattern 3", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("./src/test [input [a]][input [b]]"));
        context.assert(arg.paths.length === 1);
        context.assert(arg.paths[0] === "./src/test");
        context.assert(arg.commands.length === 2);
        context.assert(arg.commands[0] === "input [a]");
        context.assert(arg.commands[1] === "input [b]");
        context.ok();
    }
    catch (e) {
        context.assert(e.message, false);
    }
});
runner.test("arguments: pattern 4", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("[input a]"));
        context.assert(arg.paths.length === 1);
        context.assert(arg.paths[0] === "./");
        context.assert(arg.commands.length === 1);
        context.assert(arg.commands[0] === "input a");
        context.ok();
    }
    catch (e) {
        context.assert(e.message, false);
    }
});
runner.test("arguments: pattern 5", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("[input [] a]"));
        context.assert(arg.paths.length === 1);
        context.assert(arg.paths[0] === "./");
        context.assert(arg.commands.length === 1);
        context.assert(arg.commands[0] === "input [] a");
        context.ok();
    }
    catch (e) {
        context.assert(e.message, false);
    }
});
runner.test("arguments: pattern 6", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("./src/test [echo one && echo two]"));
        context.assert(arg.paths.length === 1);
        context.assert(arg.paths[0] === "./src/test");
        context.assert(arg.commands.length === 1);
        context.assert(arg.commands[0] === "echo one && echo two");
        context.ok();
    }
    catch (e) {
        context.assert(e.message, false);
    }
});
runner.test("arguments: pattern 7 (expect error)", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("[input ] a]"));
        context.assert("expected error", false);
    }
    catch (e) {
        context.ok();
    }
});
runner.test("arguments: pattern 8 (expect error)", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("[input [ a]"));
        context.assert("expected error", false);
    }
    catch (e) {
        context.ok();
    }
});
runner.test("arguments: pattern 9 (multiple path)", function (context) {
    try {
        var arg = parse_1.parse_argument(argv("./path1 ./path2 [input a] [input b]"));
        context.assert(arg.paths.length === 2);
        context.assert(arg.paths[0] === "./path1");
        context.assert(arg.paths[1] === "./path2");
        context.assert(arg.commands.length === 2);
        context.assert(arg.commands[0] === "input a");
        context.assert(arg.commands[1] === "input b");
        context.ok();
    }
    catch (e) {
        context.assert(e.message, false);
    }
});
runner.test("process: ping google.com and wait.", function (context) {
    var process = process_1.create_process(1, "ping google.com -n 2");
    var hasdata = false;
    setTimeout(function () {
        context.assert("process didn't exit within 5 seconds", false);
        process.dispose();
    }, 5000);
    process.on("data", function (data) { hasdata = true; });
    process.on("end", function () {
        if (hasdata)
            context.ok();
        else
            context.assert("process emitted no data", false);
    });
    process.start();
});
runner.test("process: ping google.com and terminate.", function (context) {
    var process = process_1.create_process(1, "ping -n 10000");
    var hasdata = false;
    var hasend = false;
    setTimeout(function () { return process.dispose(); }, 1000);
    setTimeout(function () {
        if (hasdata === false)
            context.assert("did not receive data signal", false);
        if (hasend === false)
            context.assert("did not receive end signal", false);
        context.ok();
    }, 2000);
    process.on("data", function (data) { hasdata = true; });
    process.on("end", function () { hasend = true; });
    process.start();
});
runner.run();
