"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function reload_script() {
    return "\nwindow.addEventListener(\"load\", function() {\n  /**\n   * handles incoming signals from the comet endpoint.\n   * @param {string} the incoming signal.\n   * @returns {void}\n   */  \n  function handler(signal) {\n    switch(signal) {\n      case \"established\": console.log(\"fsweb: established\");  break;\n      case \"reload\"     : window.location.reload(); break;\n      case \"ping\"       : break;  \n      case \"disconnect\":\n        console.log(\"fsweb: disconnected\");\n        setTimeout(function() {\n          console.log(\"fsweb: reconnecting...\");\n          connect(handler)\n        }, 1000) \n        break;\n    }\n  }\n\n  /**\n   * connects to the comet endpoint and \n   * begins listening for incoming signals.\n   * @param {Function} the signal handler.\n   * @returns {void}\n   */\n  function connect(handler) {\n    var xhr = new XMLHttpRequest();\n    var idx = 0;\n    xhr.addEventListener(\"readystatechange\", function(event) {\n      switch(xhr.readyState) {\n        case 4: handler(\"disconnect\"); break;\n        case 3:\n          var signal = xhr.response.substr(idx);\n          idx += signal.length;\n          handler(signal);\n          break;\n      }\n    });\n    xhr.open(\"GET\", \"/__signal\", true); \n    xhr.send();\n  }\n  /**\n   * connect\n   */\n  connect(handler)\n})\n\n";
}
exports.reload_script = reload_script;
